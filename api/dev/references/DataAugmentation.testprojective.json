{"attributes":{"kind":"function","backlinks":[{"tag":"sourcefile","title":"DataAugmentation/src/testing.jl","docid":"sourcefiles/DataAugmentation/src/testing.jl"}],"methods":[{"line":91,"file":"/home/runner/.julia/packages/DataAugmentation/zwubD/src/testing.jl","method_id":"DataAugmentation.testprojective_1","symbol_id":"DataAugmentation.testprojective","filedoc":"sourcefiles/DataAugmentation/src/testing.jl","signature":"testprojective(tfm::DataAugmentation.ProjectiveTransform)"},{"line":87,"file":"/home/runner/.julia/packages/DataAugmentation/zwubD/src/testing.jl","method_id":"DataAugmentation.testprojective_2","symbol_id":"DataAugmentation.testprojective","filedoc":"sourcefiles/DataAugmentation/src/testing.jl","signature":"testprojective(tfm::DataAugmentation.ProjectiveTransform, Is::Tuple{Vararg{var\"#s68\", N}} where var\"#s68\"<:Type)"},{"line":68,"file":"/home/runner/.julia/packages/DataAugmentation/zwubD/src/testing.jl","method_id":"DataAugmentation.testprojective_3","symbol_id":"DataAugmentation.testprojective","filedoc":"sourcefiles/DataAugmentation/src/testing.jl","signature":"testprojective(tfm::DataAugmentation.ProjectiveTransform, items::Tuple)"}],"name":"testprojective","title":"testprojective","symbol_id":"DataAugmentation.testprojective","public":false,"module_id":"DataAugmentation"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["testprojective(tfm)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Test invariants of a ",{"attributes":{},"tag":"code","children":["ProjectiveTransform"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"ol","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["getprojection"],"type":"node"}," is defined, and, given a constant ",{"attributes":{},"tag":"code","children":["randstate"],"type":"node"}," parameter, always returns the same result."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["It preserves the item type, i.e. ",{"attributes":{},"tag":"code","children":["apply(tfm, ::I) -> I"],"type":"node"},"."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Applying it to multiple items with the same bounds results in the same bounds for all items."],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}